/**
 * name: WebAppKit
 * author: Nolann Morenc√©
 * version: 1.0.0
 */

const fs = require("fs");const prompt = require("prompt-sync")();const liveServer = require("live-server");const INDEX_HTML = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1.0"><link rel="manifest" href="/manifest.webmanifest"><link class="app-icon" rel="icon" href=""><link class="app-icon" rel="apple-touch-icon" href=""><link class="app-icon" rel="apple-touch-startup-image" href=""><meta class="app-theme" name="theme-color" content="black"><meta class="app-theme" name="apple-mobile-web-app-status-bar-style" content="black"><title id="app-name">App</title><script src="./app/script.js" type="module"></script><link rel="stylesheet" href="./app/style.css"></head><body><small id="app-version"></small><h1 id="app-title"></h1><iframe id="app-screen" src="" frameborder="0" sandbox="allow-scripts allow-same-origin"></iframe></body></html>';const APP_JS = 'const FileFormat = {PNG: "png",JPG: "jpg",GIF: "gif"};class CustomComponent extends HTMLElement {constructor() {super();this.innerHTML = this.render();}get properties() {return Object.values(this.attributes).reduce((acc, attr) => {acc[attr] = attr.value;});}}const App = {navigate: (screenName) => {parent.document.getElementById("app-screen").src = "./../screens/"+screenName+"/screen.html";document.getElementById("app-screen").style.color = "red";},alert: (message) => {parent.alert(message);},getResourceURL: (name, format) => {return "./../resources/"+name+"."+format;},addComponent: (tag, component) => {let script = document.createElement("script");script.type = "module";script.src = "./../../components/"+component+".js";document.head.appendChild(script);customElements.define(tag, component);}};export {FileFormat,CustomComponent,App};';const SCREEN_CSS = 'html, body {height: 100%;}body {padding: 0;margin: 0;user-select: none;-webkit-user-select: none;font-family: Arial, Helvetica, sans-serif;}img {-webkit-user-drag: none;}';const SCRIPT_JS = 'window.addEventListener("load", load);function load() {fetch("./../config.json").then(res => res.json()).then(json => {document.getElementById("app-version").textContent = "v"+json.version;document.getElementById("app-name").textContent = json.name;if(json.title.display == "none") {document.getElementById("app-title").remove();} else {document.getElementById("app-title").textContent = json.title.name;}[...document.getElementsByClassName("app-icon")].forEach(element => {element.href = "./resources/"+json.icon;});[...document.getElementsByClassName("app-theme")].forEach(element => {element.content = json.backgroundColor;});document.body.style.color = json.color ?? "black";document.body.style.backgroundColor = json.backgroundColor ?? "white";document.getElementById("app-screen").src = "./../screens/"+json.launchScreen+"/screen.html";});}';const STYLE_CSS = 'body {padding: 0;margin: 0;width: 100vw;height: 100vh;user-select: none;-webkit-user-select: none;font-family: Arial, Helvetica, sans-serif;overflow: hidden;display: flex;flex-direction: column;position: fixed;top: 0; left: 0;}img {-webkit-user-drag: none;}small#app-version {position: fixed;top: 5px;left: 5px;}h1#app-title {margin: 10px;text-align: center;}iframe#app-screen {width: 100%;height: 100%;}';const NEW_SCREEN_HTML = `<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><link rel="stylesheet" href="./../../app/screen.css"><script src="./script.js" type="module"></script><link rel="stylesheet" href="./style.css"></head><body><p>&{screen_name}</p></body></html>`;const NEW_SCREEN_JS = `import { App } from "./../../app/App.js";window.addEventListener("load", load);function load() {//}`;const NEW_COMPONENT_JS = `import { CustomComponent } from "../app/App.js";const STYLE = \`\`;class &{component_name} extends CustomComponent {constructor() {super();}render() {return \`<div style="\${STYLE}">&{component_name}</span>\`;}}export {&{component_name}};`;switch(process.argv[2]) {case "init":init();break;case "help":help();break;default:if(fs.existsSync(process.argv[2])) {switch(process.argv[3]) {case "screen":var screenName = prompt("Your screen name ? (new_screen) ");createScreen(screenName !== null && screenName.match(/^ *$/) === null ? screenName.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase() : "new_screen", process.argv[2]);break;case "component":var componentName = prompt("Your component name ? (NewComponent) ");createComponent(componentName !== null && componentName.match(/^ *$/) === null ? componentName : "NewComponent", process.argv[2]);break;case "start":start(process.argv[2]);break;case "upgrade":upgrade(process.argv[2]);break;default:help();}} else if(process.argv[3] != undefined && process.argv[3].match(/^ *$/) === null) {console.log("\x1b[91mApp not found\x1b[0m");} else {help();}}function help() {console.log("\x1b[94mWelcome on WebAppKit !");console.log("Thanks for using this framework\x1b[0m");console.log("\n\x1b[92mUsage: \x1b[93mnode wak.js <command>\x1b[0m");console.log("---");console.log("\x1b[93minit\x1b[0m\x1b[92m: Initiate a new project");console.log("\x1b[93mhelp\x1b[0m\x1b[92m: Show this help");console.log("\n\x1b[92mUsage: \x1b[93mnode wak.js <app-name> <command>\x1b[0m");console.log("---");console.log("\x1b[93mscreen\x1b[0m\x1b[92m: Create a new screen");console.log("\x1b[93mcomponent\x1b[0m\x1b[92m: Create a new component");console.log("\x1b[93mstart\x1b[0m\x1b[92m: Run your app");console.log("\x1b[93mupgrade\x1b[0m\x1b[92m: Upgrade your app");console.log("\n\x1b[96mLink to github project: https://github.com/exagyde/webappkit\x1b[0m");}function init() {var appName = prompt("What is your app name ? (MyWebApp) ");var appDescription = prompt("What is your app description ? ");var appAuthor = prompt("What is the author name ? ");var appVersion = prompt("First version of your app ? (0.0.1) ");var appTitleName = prompt("For app title, name on screen ? (My Web App) ");var appTitleDisplay = prompt("               display on all screens or not ? (all/none) ");var appLaunchScreen = prompt("Launch screen name ? (home_screen) ");var appIcon = prompt("Icon file name (in resources folder) ? (logo.png) ");var appColor = prompt("Main font color ? (black) ");var appBackgroundColor = prompt("Main background color ? (white) ");appName = appName !== null && appName.match(/^ *$/) === null ? appName : "MyWebApp";appTitleName = appTitleName !== null && appTitleName.match(/^ *$/) === null ? appTitleName : "My Web App";appBackgroundColor = appBackgroundColor !== null && appBackgroundColor.match(/^ *$/) === null ? appBackgroundColor : "white";appIcon = appIcon !== null && appIcon.match(/^ *$/) === null ? appIcon : "logo.png";appLaunchScreen = appLaunchScreen !== null && appLaunchScreen.match(/^ *$/) === null ? appLaunchScreen : "home_screen";if(!fs.existsSync("./"+appName)) {const CONFIG = {"name": appName,"description": appDescription,"author": appAuthor,"version": appVersion !== null && appVersion.match(/^ *$/) === null ? appVersion : "0.0.1","title": {"name": appTitleName,"display": appTitleDisplay !== null && appTitleDisplay.match(/^ *$/) === null ? appTitleDisplay : "all"},"launchScreen": appLaunchScreen,"icon": appIcon,"color": appColor !== null && appColor.match(/^ *$/) === null ? appColor : "black","backgroundColor": appBackgroundColor};const WEBMANIFEST = {"short_name": appName,"name": appTitleName,"theme_color": appBackgroundColor,"background_color": appBackgroundColor,"display": "fullscreen","Scope": "/","orientation": "portrait","icons": [{"src": "./resources/"+appIcon,"type": "image/"+appIcon.split(".")[1]}],"start_url": "index.html"};fs.mkdirSync("./"+appName);fs.writeFileSync("./"+appName+"/config.json", JSON.stringify(CONFIG));fs.writeFileSync("./"+appName+"/manifest.webmanifest", JSON.stringify(WEBMANIFEST));fs.mkdirSync("./"+appName+"/app");fs.mkdirSync("./"+appName+"/components");fs.mkdirSync("./"+appName+"/resources");fs.writeFileSync("./"+appName+"/resources/"+appIcon, Buffer.from("iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAKElEQVQ4jWNgYGD4Twzu6FhFFGYYNXDUwGFpIAk2E4dHDRw1cDgaCAASFOffhEIO3gAAAABJRU5ErkJggg==", "base64"));fs.mkdirSync("./"+appName+"/screens");fs.writeFileSync("./"+appName+"/index.html", INDEX_HTML);fs.writeFileSync("./"+appName+"/app/App.js", APP_JS);fs.writeFileSync("./"+appName+"/app/screen.css", SCREEN_CSS);fs.writeFileSync("./"+appName+"/app/script.js", SCRIPT_JS);fs.writeFileSync("./"+appName+"/app/style.css", STYLE_CSS);console.log("\x1b[92mProject "+appName+" created\x1b[0m");createScreen(appLaunchScreen, appName);} else {console.log("\x1b[91mProject "+appName+" already exists\x1b[0m");}}function createScreen(name, app) {if(!fs.existsSync("./"+app+"/screens/"+name)) {fs.mkdirSync("./"+app+"/screens/"+name);fs.writeFileSync("./"+app+"/screens/"+name+"/screen.html", NEW_SCREEN_HTML.replace(/\&\{screen_name\}/g, name));fs.writeFileSync("./"+app+"/screens/"+name+"/script.js", NEW_SCREEN_JS);fs.writeFileSync("./"+app+"/screens/"+name+"/style.css", "");console.log("\x1b[92mScreen "+name+" created\x1b[0m");} else {console.log("\x1b[91mScreen "+name+" already exists\x1b[0m");}}function createComponent(name, app) {if(!fs.existsSync("./"+app+"/components/"+name+".js")) {fs.writeFileSync("./"+app+"/components/"+name+".js", NEW_COMPONENT_JS.replace(/\&\{component_name\}/g, name));console.log("\x1b[92mComponent "+name+" created\x1b[0m");} else {console.log("\x1b[91mComponent "+name+" already exists\x1b[0m");}}function start(app) {liveServer.start({port: 4200,host: "localhost",root: app,open: true,logLevel: 2});}function upgrade(app) {if(fs.existsSync("./"+app+"/config.json")) {var config = JSON.parse(fs.readFileSync("./"+app+"/config.json", "utf8"));if(config.version.match(/\d+$/g) !== null) {var newVersion = config.version.replace(/\d+$/g, "") + (parseInt(config.version.split(".")[config.version.split(".").length-1]) + 1);var appVersion = prompt("New version of your app (actual is "+config.version+") ? ("+newVersion+") ");config.version = appVersion !== null && appVersion.match(/^ *$/) === null ? appVersion : newVersion;fs.writeFileSync("./"+app+"/config.json", JSON.stringify(config));console.log("\x1b[92mVersion upgraded to "+config.version+"\x1b[0m");} else {console.log("\x1b[91mNo version number found\x1b[0m");}} else {console.log("\x1b[91mNo config.json found\x1b[0m");}}